(function ($) { function getTransformProperty(a) { var b = ["transform", "WebkitTransform", "msTransform", "MozTransform", "OTransform"]; var c; while (c = b.shift()) { if (typeof a.style[c] != "undefined") { return c } } return "transform" } $.fn.extend({ quake: function (options) { var settings = $.extend({ animationSpeed: 500, pauseTime: 4e3, rows: 4, cols: 12, thumbnails: true, thumbnailsPath: "", applyEffectsRandomly: true, effects: ["swirlFadeOutRotate", "swirlFadeOutRotateFancy", "swirlFadeIn", "swirlFadeOut", "slabs", "spiral", "spiralReverse", "diagonalShow", "diagonalShowReverse", "spiralDimension", "spiralReverseDimension", "boxFadeIn", "boxFadeOutOriginal", "boxFadeOutOriginalRotate", "diagonalFade", "diagonalFadeReverse", "randomFade", "randomDimensions", "boxes", "explode", "explodeFancy", "linearPeal", "linearPealReverse", "linearPealDimensions", "linearPealReverseDimensions", "blind", "blindHorizontal", "barsUp", "barsDown", "barsDownReverse", "blindFade", "fallingBlindFade", "raisingBlindFade", "mixBars", "mixBarsFancy", "fade", "blindFadeReverse", "slideIn", "slideInFancy", "slideInReverse", "chop", "chopDimensions", "chopDiagonal", "chopDiagonalReverse", "slideLeft", "slideRight", "slideUp", "slideDown"], nextText: "Next", prevText: "Prev", navPlacement: "outside", navAlwaysVisible: false, hasNextPrev: true, captionOpacity: .5, captionOrientations: ["right"], captionAnimationSpeed: 1e3, captionsSetup: null }, options); return this.each(function () { function setup() { captionContainer.css("opacity", settings.captionOpacity).html(""); sliderContainer.html(""); var a = $("<a/>").addClass("quake-link"); a.css("display", "none"); a.css("width", sliderWidth); a.css("height", sliderHeight); sliderContainer.prepend(a); if (settings.hasNextPrev) { sliderWrapper.prepend(navContainer); if (!settings.navAlwaysVisible) { navContainer.hide(); sliderWrapper.mouseenter(function () { navContainer.show(); setupNavVisibility(true) }).mouseleave(function () { navContainer.hide(); setupNavVisibility(false) }) } navContainer.find(".quake-prev").click(function () { if (!isAnimating) { stop(); currentImageIndex = previousImageIndex; currentImageIndex -= 1; if (currentImageIndex < 0) currentImageIndex = images.length - 1; runAnimation(); start() } }); navContainer.find(".quake-next").click(function () { if (!isAnimating) { stop(); runAnimation(); start() } }) } else { if (!settings.navAlwaysVisible) { sliderWrapper.mouseenter(function () { setupNavVisibility(true) }).mouseleave(function () { setupNavVisibility(false) }) } } sliderWrapper.mouseenter(stop).mouseleave(start); if (theme == "violet") sliderWrapper.append(captionContainer); else sliderContainer.append(captionContainer) } function start() { animationInterval = setInterval(runAnimation, pauseTime) } function stop() { isAnimating = false; clearInterval(animationInterval); animationInterval = null } function setupNavVisibility(a) { if (settings.navPlacement == "inside") { if (a) sliderWrapper.find(".quake-nav-wrapper").show(); else sliderWrapper.find(".quake-nav-wrapper").hide() } } function addNavigationControls() { var a = $("<div/>").addClass("quake-nav-wrapper " + settings.navPlacement + ""); var b = $("<div/>").addClass("quake-nav-container"); a.append(b); if (settings.hasNextPrev && !settings.navAlwaysVisible) a.hide(); $(images).each(function (a, c) { b.append($("<a/>").attr("href", "#").attr("rel", a).addClass("quake-nav-control").html(a)) }); $(".quake-nav-container a").live("click", onNavClick); sliderContainer.after(a); var c = totalImages * parseFloat(b.find("a").outerWidth()); b.css("width", c); if (settings.thumbnails) { var d = $("<div/>").css({ display: "none", opacity: "0" }); d.addClass("quake-thumbnail").append($("<div/>").addClass("quake-thumbnail-preview").append($("<img/>"))); a.append(d); var e = d.find(".quake-thumbnail-preview").width(); var f = d.find(".quake-thumbnail-preview").height(); var g = sliderWidth / sliderHeight; var h = e / f; if (g - h > 1) { g = (g + h) / (g - h) } if (g > 0) e = g * f; $(".quake-nav-container a").live("mouseenter", function () { var a = $(this).position().left + $(this).outerWidth() / 2; var b = a - d.outerWidth() / 2; var c = $(this).position().top - d.outerHeight(); var g = images[parseInt($(this).html())]; if (g != null) { var h = getImageSrc(g); if (settings.thumbnailsPath != "") { var i = getImageSrc(g).split("/"); h = settings.thumbnailsPath + "/" + i[i.length - 1] } d.find("img").attr("src", h).css({ width: e, height: f }); d.css({ left: b, top: c, display: "block" }).stop(true, true).animate({ opacity: 1 }, 500) } }); $(".quake-nav-container a").live("mouseleave", function () { d.css({ display: "none", opacity: 0 }) }) } } function onNavClick() { if (!isAnimating && !$(this).hasClass("active")) { isAnimating = false; currentImageIndex = parseInt($(this).attr("rel")); stop(); runAnimation(); start() } return false } function animateRandomFade() { createBoxes(); var a = $(".quake-el").get().sort(function () { return Math.round(Math.random()) - .5 }); $(a).each(function (a) { var b = coordinates[a]; var c = "left:" + b.left + "; top:" + b.top + ""; $(this).css("background-position", c) }); $(a).each(function (b) { if (complete < a.length) { var c = $(this); setTimeout(function () { try { c.fadeIn(animationSpeed, function () { complete++; if (complete == a.length) { animationComplete() } }) } catch (b) { } }, factor); factor += timeFactor * 2 } }) } function animateRandomFadeDimensions() { createBoxes(); var a = Math.ceil(sliderWidth / cols); var b = Math.ceil(sliderHeight / rows); $(".quake-el").css({ width: 0, height: 0, opacity: 0, display: "block" }); var c = $(".quake-el").get().sort(function () { return Math.round(Math.random()) - .5 }); $(c).each(function (a) { var b = coordinates[a]; var c = "left:" + b.left + "; top:" + b.top + ""; $(this).css("background-position", c) }); $(c).each(function (d) { if (complete < c.length) { var e = $(this); setTimeout(function () { try { e.animate({ opacity: 1, width: a, height: b }, animationSpeed, function () { complete++; if (complete == c.length) { animationComplete() } }) } catch (d) { } }, factor); factor += timeFactor * 2 } }) } function animateBoxes() { createBoxes(); var a = Math.ceil(sliderWidth / cols); var b = Math.ceil(sliderHeight / rows); $(".quake-el").css({ width: 0, height: 0, opacity: 0, display: "block" }); $(".quake-el").each(function (c) { var d = $(this); try { d.animate({ opacity: 1, width: a, height: b }, animationSpeed, function () { complete++; if (complete == noOfBoxes) { animationComplete() } }) } catch (e) { } factor += timeFactor * 2 }) } function animateLinearPealDimensions() { createBoxes(); var a = Math.ceil(sliderWidth / cols); var b = Math.ceil(sliderHeight / rows); $(".quake-el", sliderContainer).each(function () { var c = $(this); setTimeout(function () { c.css({ width: 0, height: 0, opacity: 1, display: "block" }).animate({ width: a, height: b }, animationSpeed, function () { complete++; if (complete == noOfBoxes) { animationComplete() } }) }, factor * 1.5); factor += timeFactor }) } function animateReversePealDimensions() { createBoxes(); var a = Math.ceil(sliderWidth / cols); var b = Math.ceil(sliderHeight / rows); var c = new Array; $(".quake-el", sliderContainer).each(function (a) { swapDirection(a); if (direction == "forward") { c.push(a) } else { var b = currentRow * cols - 1 + ((currentRow - 1) * cols - a); c.push(b) } }); $(".quake-el", sliderContainer).each(function (d) { setTimeout(function () { $(".quake-el:eq(" + c[d] + ")", sliderContainer).css({ width: 0, height: b, opacity: 1, display: "block" }).animate({ width: a, height: b }, animationSpeed / 2, function () { complete++; if (complete == c.length) { animationComplete() } }) }, factor * 1.5); factor += timeFactor }) } function animateLinearPeal() { createBoxes(); $(".quake-el", sliderContainer).each(function () { var a = $(this); setTimeout(function () { a.fadeIn(animationSpeed, function () { complete++; if (complete == noOfBoxes) { animationComplete() } }) }, factor * 1.3); factor += timeFactor }) } function animateReversePeal() { createBoxes(); var a = new Array; $(".quake-el", sliderContainer).each(function (b) { swapDirection(b); if (direction == "forward") { a.push(b) } else { var c = currentRow * cols - 1 + ((currentRow - 1) * cols - b); a.push(c) } }); $(".quake-el", sliderContainer).each(function (b) { setTimeout(function () { $(".quake-el:eq(" + a[b] + ")", sliderContainer).fadeIn(animationSpeed / 2, function () { complete++; if (complete == a.length) { animationComplete() } }) }, factor * 1.5); factor += timeFactor }) } function animateSpiral(a, b) { createBoxes(); var c = Math.ceil(sliderWidth / cols); var d = Math.ceil(sliderHeight / rows); if (b) $(".quake-el", sliderContainer).css({ width: 0, height: 0, opacity: 1 }); var e = new Array; var f = 0; for (var g = 0; g < rows; g++) { var h = new Array; e.push(h); for (var i = 0; i < cols; i++) { h.push(f); f++ } } var j = new Array; j = spiralify(e); if (a) j.reverse(); $(".quake-el", sliderContainer).each(function (a) { setTimeout(function () { if (!b) { $(".quake-el:eq(" + j[a] + ")", sliderContainer).fadeIn(animationSpeed / 2, function () { complete++; if (complete == j.length) { animationComplete() } }) } else { $(".quake-el:eq(" + j[a] + ")", sliderContainer).show().animate({ width: c, height: d }, animationSpeed / 2, function () { complete++; if (complete == j.length) { animationComplete() } }) } }, factor * 1.5); factor += timeFactor }) } function animateSwirlFadeIn() { createCircles(currentImageIndex); var a = new Array; $(".quake-el", sliderContainer).each(function (b) { a.push(minCircumeference * (b + 1)) }); a[a.length - 1] = 0; $(".quake-el", sliderContainer).each(function (b) { var c = $(this); setTimeout(function () { c.css({ borderRadius: a[b] }).animate({ opacity: 1, zIndex: 0 }, animationSpeed, function () { complete++; if (complete == a.length) { animationComplete() } }) }, factor); factor += timeFactor }) } function animateBoxFadeOutOriginal(a) { if (previousImage == null) previousImage = images[images.length - 1]; var b = $("<div/>").css({ zIndex: 1, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", position: "absolute", width: "100%", height: "100%" }).addClass("quake-fi"); createCircles(previousImageIndex); sliderContainer.append(b); var c = $(".quake-el", sliderContainer).css("opacity", 1).length; var d = sliderWidth / animationSpeed; var e = 0; if (a) e = 360; $(".quake-el", sliderContainer).each(function (a) { var b = $(this); setTimeout(function () { b.animate({ opacity: 0, scale: "-=1", rotate: "+=" + e + "deg" }, animationSpeed, function () { complete++; if (complete == c - 1) { animationComplete() } }) }, factor); factor += timeFactor }) } function animateBoxFadeIn() { var a = circles * 2; var b = currentImageIndex; minCircumeference = sliderWidth / a; minCircumeference++; zindex = 100; timeFactor = animationSpeed / circles; for (var c = 0; c < a; c++) { var d = c + 1; d /= a; var e = (c + 1) * minCircumeference; var f = centerLeft - e / 2; var g = centerTop - e / 2; var h = (c + 1) * minCircumeference; var i = $("<div/>").css({ backgroundImage: "url(" + getImageSrc(images[b]) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", left: f, top: g, position: "absolute", width: e, height: e, opacity: 0 }).addClass("quake-el"); sliderContainer.append(i) } var j = new Array; $(".quake-el", sliderContainer).each(function (a) { j.push(minCircumeference * (a + 1)) }); $(".quake-el", sliderContainer).each(function (a) { var b = $(this); setTimeout(function () { b.animate({ opacity: 1 }, animationSpeed, function () { complete++; if (complete == j.length) { animationComplete() } }) }, factor); factor += timeFactor }) } function animateSwirlFadeOut() { var a = $("<div/>").css({ zIndex: 1, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", position: "absolute", width: "100%", height: "100%" }).addClass("quake-fi"); createCircles(previousImageIndex); $(".quake-el", sliderContainer).css({ opacity: 1, zIndex: 2 }); var b = new Array; $(".quake-el", sliderContainer).each(function (a) { $(this).css({ borderRadius: minCircumeference * (a + 1) }) }); $(".quake-el:last").css({ borderRadius: 0 }); sliderContainer.append(a); setTimeout(function () { hideIt(1) }, 0) } function animateSwirlFadeOutRotate(a) { var b = $("<div/>").css({ zIndex: 1, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", position: "absolute", width: "100%", height: "100%" }).addClass("quake-fi"); createCircles(previousImageIndex); $(".quake-el", sliderContainer).css({ opacity: 1 }); var c = new Array; var d = new Array; $(".quake-el", sliderContainer).css("background-repeat", "repeat").each(function (a) { $(this).css({ borderRadius: minCircumeference * (a + 1) }); d.push(a) }); sliderContainer.append(b); d = d.reverse(); var e = d.length; var f = 20; $(d).each(function (b, c) { var d = $(".quake-el", sliderContainer).eq(b); f += 5; var g = f; if (a) if (c % 2 != 0) g = -f; factor = 100 * c; setTimeout(function () { d.animate({ opacity: 0, rotate: g + "deg" }, animationSpeed, function () { complete++; if (complete == e - 1) animationComplete() }) }, factor) }) } function animateDiagonally(a, b) { var c = Math.ceil(sliderWidth / cols); var d = Math.ceil(sliderHeight / rows); for (var e = 0; e < rows; e++) { for (var f = 0; f < cols; f++) { $("<div/>").addClass("quake-el").css({ width: b ? 0 : c, height: b ? 0 : d, left: Math.ceil(f * c), top: Math.ceil(e * d), position: "absolute", opacity: b ? 1 : 0, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(f * c) + "px " + -(e * d) + "px" }).appendTo(sliderContainer) } } timeFactor = animationSpeed / noOfBoxes; var g = new Array; for (var h = 0; h < rows + cols - 1; h++) { g.push(h); g[h] = new Array; for (var i = Math.min(rows, h + 1) - 1; i >= Math.max(0, h - cols + 1); i--) { g[h].push(i * cols + h - i) } } if (a) g.reverse(); $(g).each(function (a, b) { setTimeout(function () { $(b).each(function (a, b) { $(".quake-el:eq(" + b + ")").animate({ opacity: 1, width: c, height: d }, animationSpeed, function () { complete++; if (complete == noOfBoxes) { animationComplete() } }) }) }, factor * 6); factor += timeFactor }) } function animateBlind() { var a = wBars; var b = sliderWidth / a; if (b % 10 != 0) b++; for (var c = 0; c < a; c++) { $("<div/>").css({ width: 0, height: sliderHeight, left: Math.ceil(c * sliderWidth / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(c * sliderWidth / a) + "px 0px" }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (c) { var d = $(this); setTimeout(function () { d.animate({ width: b }, animationSpeed, function () { complete++; if (complete == a) { animationComplete() } }) }, factor); factor += timeFactor }) } function animateSlabs() { var a = wBars; var b = sliderWidth / a; if (b % 10 != 0) b++; for (var c = 0; c < a; c++) { $("<div/>").css({ width: b, height: sliderHeight, left: -b, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(c * sliderWidth / a) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (b) { var c = a - b; var d = $(".quake-el", sliderContainer).eq(c); var e = Math.ceil(c * sliderWidth / a); setTimeout(function () { d.animate({ left: e, opacity: 1 }, animationSpeed) }, factor); factor += timeFactor }); factor -= timeFactor; setTimeout(function () { $(".quake-el", sliderContainer).eq(0).animate({ left: 0, opacity: 1 }, animationSpeed, animationComplete) }, factor) } function animateBlindHorizontal() { var a = hBars; var b = sliderHeight / a; if (b % 10 != 0) b++; for (var c = 0; c < a; c++) { $("<div/>").css({ width: sliderWidth, height: 0, top: Math.ceil(c * sliderHeight / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "0px " + -(c * sliderHeight / a) + "px" }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (c) { var d = $(this); setTimeout(function () { d.animate({ height: b }, animationSpeed, function () { complete++; if (complete == a) { animationComplete() } }) }, factor); factor += timeFactor }) } function animateBlindFade() { var a = wBars; var b = sliderWidth / a; if (b % 10 != 0) b += 1; for (var c = 0; c < a; c++) { $("<div/>").css({ width: b, height: sliderHeight, left: Math.ceil(c * sliderWidth / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(c * sliderWidth / a) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (b) { var c = $(this); setTimeout(function () { c.animate({ opacity: 1 }, animationSpeed, function () { complete++; if (complete == a - 1) { animationComplete() } }) }, factor * 2); factor += timeFactor }) } function animateBlindFadeReverse() { var a = wBars; var b = sliderWidth / a; if (b % 10 != 0) b += 1; for (var c = 0; c < a; c++) { $("<div/>").css({ width: b, height: sliderHeight, left: Math.ceil(c * sliderWidth / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(c * sliderWidth / a) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (b) { var c = $(".quake-el", sliderContainer).eq(a - (b + 1)); setTimeout(function () { c.animate({ opacity: 1 }, animationSpeed, function () { complete++; if (complete == a - 1) { animationComplete() } }) }, factor * 2); factor += timeFactor }) } function animateFallingBlindFade() { var a = hBars; var b = sliderHeight / a; if (b % 10 != 0) b += 1; for (var c = 0; c < a; c++) { $("<div/>").css({ width: sliderWidth, height: b, left: 0, top: Math.ceil(c * sliderHeight / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "0px " + -(c * sliderHeight / a) + "px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (b) { var c = $(this); setTimeout(function () { c.animate({ opacity: 1 }, animationSpeed, function () { complete++; if (complete == a) { animationComplete() } }) }, factor * 2); factor += timeFactor }) } function animateRaisingBlindFade() { var a = hBars; var b = sliderHeight / a; if (b % 10 != 0) b += 1; for (var c = 0; c < a; c++) { $("<div/>").css({ width: sliderWidth, height: b, left: 0, top: Math.ceil(c * sliderHeight / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "0px " + -(c * sliderHeight / a) + "px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function (b) { var c = $(".quake-el", sliderContainer).eq(a - (b + 1)); setTimeout(function () { c.animate({ opacity: 1 }, animationSpeed, function () { complete++; if (complete == a) { animationComplete() } }) }, factor * 2); factor += timeFactor }) } function animateMixBars() { var a = wBars; timeFactor = animationSpeed / a; for (var b = 0; b < a; b++) { $("<div/>").css({ width: Math.ceil(sliderWidth / a), height: sliderHeight, marginTop: b % 2 == 0 ? -sliderHeight : sliderHeight, left: Math.ceil(b * sliderWidth / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(b * sliderWidth / a) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } $(".quake-el", sliderContainer).each(function (b) { var c = $(this); setTimeout(function () { c.animate({ marginTop: 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == a - 1) animationComplete() }) }, factor * 1.5); factor += timeFactor }) } function animateMixBarsFancy() { var a = wBars; timeFactor = animationSpeed / a; for (var b = 0; b < a; b++) { $("<div/>").css({ width: Math.ceil(sliderWidth / a), height: sliderHeight, marginTop: b % 2 == 0 ? -sliderHeight : sliderHeight, left: Math.ceil(b * sliderWidth / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(b * sliderWidth / a) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } $(".quake-el:odd", sliderContainer).each(function (b) { var c = $(".quake-el", sliderContainer).eq(b); var d = $(".quake-el", sliderContainer).eq(a - (b + 1)); setTimeout(function () { c.animate({ marginTop: 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == a - 1) animationComplete() }); d.animate({ marginTop: 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == a - 1) animationComplete() }) }, factor * 1.5); factor += timeFactor }) } function animateBarsDown(a) { var b = wBars; timeFactor = animationSpeed / b; if (previousImage == null) previousImage = currentImage; for (var c = 0; c < b; c++) { $("<div/>").css({ width: Math.ceil(sliderWidth / b), height: sliderHeight, marginTop: a ? 0 : -sliderHeight, left: Math.ceil(c * sliderWidth / b), position: "absolute", backgroundImage: "url(" + getImageSrc(a ? previousImage : currentImage) + ")", backgroundPosition: "" + -(c * sliderWidth / b) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } var d = $("<div/>").css({ zIndex: 0, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", position: "absolute", width: "100%", height: "100%" }).addClass("quake-fi"); if (a) { $(".quake-el", sliderContainer).css({ opacity: 1, zIndex: 2 }); sliderContainer.append(d) } $(".quake-el", sliderContainer).each(function (c) { var d = $(this); setTimeout(function () { d.animate({ marginTop: a ? -sliderHeight : 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == b - 1) animationComplete() }) }, factor * 1.5); factor += timeFactor }) } function animateBarUp() { var a = wBars; timeFactor = animationSpeed / a; for (var b = 0; b < a; b++) { $("<div/>").css({ width: Math.ceil(sliderWidth / a), height: sliderHeight, marginTop: sliderHeight, left: Math.ceil(b * sliderWidth / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(b * sliderWidth / a) + "px 0px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } $(".quake-el", sliderContainer).each(function (b) { var c = $(this); setTimeout(function () { c.animate({ marginTop: 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == a - 1) animationComplete() }) }, factor * 1.5); factor += timeFactor }) } function animateExplode() { timeFactor = animationSpeed / noOfBoxes; var a = Math.ceil(sliderWidth / cols); var b = Math.ceil(sliderHeight / rows); var c = new Array; for (var d = 0; d < rows; d++) { for (var e = 0; e < cols; e++) { $("<div/>").css({ width: a, height: b, left: Math.ceil(sliderWidth / 2 - a / 2), top: Math.ceil(sliderHeight / 2 - b / 2), opacity: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(e * a) + "px " + -(d * b) + "px" }).addClass("quake-el").appendTo(sliderContainer); var f = [{ left: e * a, top: d * b}]; c.push(f) } } $(".quake-el", sliderContainer).each(function (a) { var b = $(this); var d = c[a][0]; b.animate({ left: d.left, top: d.top, opacity: 1 }, animationSpeed * 2, function () { complete++; if (complete == noOfBoxes) animationComplete() }); factor += timeFactor }) } function animateExplodeFancy() { timeFactor = animationSpeed / noOfBoxes; var a = Math.ceil(sliderWidth / cols); var b = Math.ceil(sliderHeight / rows); var c = new Array; for (var d = 0; d < rows; d++) { for (var e = 0; e < cols; e++) { $("<div/>").css({ width: 0, height: 0, left: Math.ceil(sliderWidth / 2 - a / 2), top: Math.ceil(sliderHeight / 2 - b / 2), opacity: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "" + -(e * a) + "px " + -(d * b) + "px" }).addClass("quake-el").appendTo(sliderContainer); var f = [{ left: e * a, top: d * b}]; c.push(f) } } $(".quake-el", sliderContainer).each(function (d) { var e = $(this); setTimeout(function () { var f = c[d][0]; e.animate({ left: f.left, top: f.top, opacity: 1, width: a, height: b }, animationSpeed, function () { complete++; if (complete == noOfBoxes) { animationComplete() } }) }, factor * 2); factor += timeFactor }) } function animateFade() { $("<div/>").css({ width: sliderWidth, height: sliderHeight, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", position: "absolute", left: 0, top: 0, zIndex: 100, opacity: 0 }).addClass("quake-el").appendTo(sliderContainer); $(".quake-el", sliderContainer).animate({ opacity: 1 }, animationSpeed * 2, function () { animationComplete() }) } function animateSlideIn(a) { var b = hBars; if (wBars - hBars >= wBars / 2) { b += hBars / 2 } for (var c = 0; c < b; c++) { $("<div/>").css({ width: sliderWidth, height: Math.ceil(sliderHeight / b), marginLeft: a ? sliderWidth : -sliderWidth, top: Math.ceil(c * sliderHeight / b), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "0px " + -Math.ceil(c * sliderHeight / b) + "px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / b; $(".quake-el", sliderContainer).each(function () { var a = $(this); setTimeout(function () { a.animate({ marginLeft: 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == b) animationComplete() }) }, factor * 2); factor += timeFactor }) } function animateSlideInFancy() { var a = hBars; if (wBars - hBars >= wBars / 2) { a += hBars / 2 } for (var b = 0; b < a; b++) { $("<div/>").css({ width: sliderWidth, height: Math.ceil(sliderHeight / a), marginLeft: b % 2 == 0 ? -sliderWidth : sliderWidth, top: Math.ceil(b * sliderHeight / a), position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "0px " + -Math.ceil(b * sliderHeight / a) + "px", opacity: 0 }).addClass("quake-el").appendTo(sliderContainer) } timeFactor = animationSpeed / a; $(".quake-el", sliderContainer).each(function () { var b = $(this); setTimeout(function () { b.animate({ marginLeft: 0, opacity: 1 }, animationSpeed, function () { complete++; if (complete == a) animationComplete() }) }, factor * 2); factor += timeFactor }) } function animateChop(a, b, c) { var d = Math.ceil(sliderWidth / cols); var e = Math.ceil(sliderHeight / rows); var f = hBars / 2; if (wBars - hBars >= wBars / 2) { f += hBars / 2 } if (previousImage == null) previousImage = images[images.length - 1]; var g = $("<div/>").css({ zIndex: 0, backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", position: "absolute", width: "100%", height: "100%", display: "none" }).addClass("quake-fi"); for (var h = 0; h < f; h++) { $("<div/>").css({ width: sliderWidth, height: Math.ceil(sliderHeight / f), top: Math.ceil(h * sliderHeight / f), position: "absolute", backgroundImage: "url(" + getImageSrc(previousImage) + ")", backgroundPosition: "0px " + -Math.ceil(h * sliderHeight / f) + "px", zIndex: 2 }).addClass("quake-el").appendTo(sliderContainer) } g.css("display", "block"); sliderContainer.append(g); timeFactor = animationSpeed / f; $(".quake-el", sliderContainer).each(function (d, e) { var e = $(this); var g = d % 2 == 0 ? -sliderWidth : sliderWidth; setTimeout(function () { if (a) { e.animate({ marginLeft: g, opacity: 1, height: 0, width: 0 }, animationSpeed, function () { complete++; if (complete == f) animationComplete() }) } else { if (b) g = sliderWidth; if (c) g = -sliderWidth; e.animate({ marginLeft: g, opacity: 1 }, animationSpeed, function () { complete++; if (complete == f) animationComplete() }) } }, factor); factor += timeFactor }) } function animateSlideLeft() { var a = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: sliderWidth, top: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100, opacity: 1 }); sliderContainer.append(a); if (previousImage != null) { var b = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: 0, top: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(previousImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100 }); sliderContainer.append(b) } $(".quake-el", sliderContainer).animate({ left: "-=" + sliderWidth, opacity: 1 }, animationSpeed, function () { complete++; if (complete == 1) animationComplete() }) } function animateSlideRight() { var a = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: -sliderWidth, top: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100, opacity: 1 }); sliderContainer.append(a); if (previousImage != null) { var b = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: 0, top: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(previousImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100 }); sliderContainer.append(b) } $(".quake-el", sliderContainer).animate({ left: "+=" + sliderWidth, opacity: 1 }, animationSpeed, function () { complete++; if (complete == 1) animationComplete() }) } function animateSlideDown() { var a = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: 0, top: -sliderHeight, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100, opacity: 1 }); sliderContainer.append(a); if (previousImage != null) { var b = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: 0, top: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(previousImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100 }); sliderContainer.append(b) } $(".quake-el", sliderContainer).animate({ top: "+=" + sliderHeight, opacity: 1 }, animationSpeed, function () { complete++; if (complete == 1) animationComplete() }) } function animateSlideUp() { var a = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: 0, top: sliderHeight, position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100, opacity: 1 }); sliderContainer.append(a); if (previousImage != null) { var b = $("<div/>").addClass("quake-el").css({ width: sliderWidth, height: sliderHeight, left: 0, top: 0, position: "absolute", backgroundImage: "url(" + getImageSrc(previousImage) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", zIndex: 100 }); sliderContainer.append(b) } sliderContainer.append(a).append(b); $(".quake-el", sliderContainer).animate({ top: "-=" + sliderHeight, opacity: 1 }, animationSpeed, function () { complete++; if (complete == 1) animationComplete() }) } function animationComplete() { $(".quake-dn", sliderContainer).remove(); $(".quake-el", sliderContainer).removeClass("quake-el").addClass("quake-dn").css("z-index", "0"); $(".quake-fi").removeClass("quake-fi").addClass("quake-dn").css("z-index", "0"); if (currentImage.is("a")) sliderContainer.find(".quake-link").css({ display: "block" }).attr("href", currentImage.attr("href")).attr("target", currentImage.attr("target")); else sliderContainer.find(".quake-link").css({ display: "none" }).attr("href", "#"); isAnimating = false } function hideIt(a) { var b = circles - a; var c = b + 1; c /= 10; c = 1 - c; $(".quake-el:eq(" + b + ")", sliderContainer).animate({ opacity: c }, timeFactor, function () { if (a < $(".quake-el", sliderContainer).length - 1) { a++; hideIt(a) } else { $(".quake-el", sliderContainer).animate({ opacity: 0 }, animationSpeed); setTimeout(animationComplete, animationSpeed + 1) } }) } function spiralify(a) { if (a.length == 1) { return a[0] } var b = a[0], c = a.length, d = [], e, f, g = a[1].length - 1; for (g; g >= 0; g--) { e = []; for (f = 1; f < c; f++) { e.push(a[f][g]) } d.push(e) } b.push.apply(b, spiralify(d)); return b } function swapDirection(a) { if (a % cols == 0) { currentRow++; if (direction == "forward") direction = "backward"; else direction = "forward" } } function createBoxes() { var a = sliderWidth / cols; var b = sliderHeight / rows; if (a % 10 > 0) { a = parseInt(a); a++ } if (b % 10 > 0) { b = parseInt(b); b++ } timeFactor = animationSpeed / noOfBoxes; for (var c = 0; c < rows; c++) { for (var d = 0; d < cols; d++) { var e = $("<div/>").css({ width: a + "px", height: b + "px", top: c * b + "px", left: d * a + "px", position: "absolute", backgroundImage: "url(" + getImageSrc(currentImage) + ")", backgroundRepeat: "no-repeat", backgroundPosition: "" + d * -a + "px " + c * -b + "px" }).addClass("quake-el").hide(); sliderContainer.append(e) } } $(".quake-el", sliderContainer).each(function (a) { var b = { left: $(this).css("left"), top: $(this).css("top") }; coordinates.push(b) }) } function getImageSrc(a) { if (a.is("img")) { return a.attr("src") } else if (a.is("a") && a.children().is("img")) return a.children().attr("src") } function createCircles(a) { minCircumeference = sliderWidth / circles; if (minCircumeference % 2 != 0 && a != currentImageIndex) minCircumeference++; zindex = 100; timeFactor = animationSpeed / circles; for (var b = 0; b < circles; b++) { var c = b + 1; c /= 10; var d = (b + 1) * minCircumeference; var e = centerLeft - d / 2; var f = centerTop - d / 2; var g = (b + 1) * minCircumeference; var h = $("<div/>").css({ backgroundImage: "url(" + getImageSrc(images[a]) + ")", backgroundPosition: "center", backgroundRepeat: "no-repeat", left: e, top: f, position: "absolute", width: d, height: d, zIndex: zindex--, opacity: 0 }).addClass("quake-el"); sliderContainer.append(h) } } function animateCaption() { if (captions.length > currentImageIndex) { var a = settings.captionOrientations.length; var b = settings.captionOrientations[a - 1]; if (currentImageIndex < a) b = settings.captionOrientations[currentImageIndex]; captionContainer.removeAttr("style").removeClass("vertical left right bottom top horizontal"); captionContainer.parent().find(".quake-slider-caption").remove(); var c = captions.eq(currentImageIndex).removeAttr("style").css("opacity", "0").removeClass("vertical left right bottom top horizontal"); captionContainer.after(c); if (settings.captionsSetup == null) { captionDefaultAnimation(captionContainer, c, b) } else { var d = getConfiguration(currentImageIndex); if (d != null) { if (d.orientation != null) b = d.orientation; setOrientation(captionContainer, c, b); captionContainer.show().css("opacity", settings.captionOpacity); c.css({ opacity: 1 }); if (d.callback != null) d.callback(captionContainer, c, b); else captionDefaultAnimation(captionContainer, c, b) } else captionDefaultAnimation(captionContainer, c, b) } } else { captionContainer.stop(true, true).animate({ opacity: 0 }, settings.captionAnimationSpeed, function () { $(this).parent().find(".quake-slider-caption").remove() }) } } function getConfiguration(slide) { if (settings.captionsSetup == null) return null; var setups = eval(settings.captionsSetup); for (var i = 0; i < setups.length; i++) { if (setups[i].slides != null) { if ($.inArray(slide, setups[i].slides) != -1) return setups[i] } } return null } function setOrientation(a, b, c) { var d; if (c == "top") d = "horizontal top"; if (c == "bottom") d = "horizontal bottom"; if (c == "left") d = "vertical left"; if (c == "right") d = "vertical right"; a.addClass("quake-slider-caption-container " + d); b.addClass("quake-slider-caption " + d) } function captionDefaultAnimation(a, b, c) { setOrientation(a, b, c); a.show().css("opacity", "0").stop(true, true).animate({ opacity: settings.captionOpacity }, settings.captionAnimationSpeed); b.stop(true, true).animate({ opacity: 1 }, settings.captionAnimationSpeed) } function runAnimation() { if (!isAnimating) { isAnimating = true; currentRow = 0; if (settings.applyEffectsRandomly) { var a = Math.floor(Math.random() * effects.length); currentEffect = effects[a] } else currentEffect = effects[currentEffectIndex]; if (currentEffect == undefined) currentEffect = "randomFade"; $(".quake-nav-container a").removeClass("active").eq(currentImageIndex).addClass("active"); animateCaption(); currentImage = images[currentImageIndex]; factor = 0; complete = 0; if (!initialized) { initialized = true; previousImageIndex = images.length - 1 } switch (currentEffect) { case "slabs": animateSlabs(); break; case "randomFade": animateRandomFade(); break; case "fade": animateFade(); break; case "linearPeal": animateLinearPeal(); break; case "linearPealReverse": animateReversePeal(); break; case "linearPealReverseDimensions": animateReversePealDimensions(); break; case "swirlFadeIn": animateSwirlFadeIn(); break; case "swirlFadeOut": animateSwirlFadeOut(); break; case "diagonalFade": animateDiagonally(false, false); break; case "diagonalFadeReverse": animateDiagonally(true, false); break; case "diagonalShow": animateDiagonally(false, true); break; case "diagonalShowReverse": animateDiagonally(true, true); break; case "blind": animateBlind(); break; case "blindHorizontal": animateBlindHorizontal(); break; case "blindFade": animateBlindFade(); break; case "blindFadeReverse": animateBlindFadeReverse(); break; case "explode": animateExplode(); break; case "explodeFancy": animateExplodeFancy(); break; case "barsUp": animateBarUp(); break; case "barsDown": animateBarsDown(false); break; case "barsDownReverse": animateBarsDown(true); break; case "mixBars": animateMixBars(); break; case "mixBarsFancy": animateMixBarsFancy(); break; case "slideIn": animateSlideIn(false); break; case "slideInReverse": animateSlideIn(true); break; case "slideInFancy": animateSlideInFancy(); break; case "slideLeft": animateSlideLeft(); break; case "slideRight": animateSlideRight(); break; case "slideUp": animateSlideUp(); break; case "slideDown": animateSlideDown(); break; case "fallingBlindFade": animateFallingBlindFade(); break; case "raisingBlindFade": animateRaisingBlindFade(); break; case "spiral": animateSpiral(false, false); break; case "spiralReverse": animateSpiral(true, false); break; case "spiralDimension": animateSpiral(false, true); break; case "spiralReverseDimension": animateSpiral(true, true); break; case "linearPealDimensions": animateLinearPealDimensions(); break; case "chop": animateChop(false, false, false); break; case "chopDimensions": animateChop(true, false, false); break; case "chopDiagonal": animateChop(false, true, false); break; case "chopDiagonalReverse": animateChop(false, false, true); break; case "randomDimensions": animateRandomFadeDimensions(); break; case "boxes": animateBoxes(); break; case "swirlFadeOutRotate": animateSwirlFadeOutRotate(false); break; case "swirlFadeOutRotateFancy": animateSwirlFadeOutRotate(true); break; case "swirlFadeInDimensions": animateSwirlFadeInDimensions(); break; case "boxFadeIn": animateBoxFadeIn(); break; case "boxFadeOutOriginal": animateBoxFadeOutOriginal(false); break; case "boxFadeOutOriginalRotate": animateBoxFadeOutOriginal(true); break } previousImage = currentImage; previousImageIndex = currentImageIndex; currentImageIndex++; if (currentImageIndex == images.length) currentImageIndex = 0; currentEffectIndex++; if (currentEffectIndex == effects.length) currentEffectIndex = 0 } } var cols = settings.cols; var rows = settings.rows; var smallThumbHeight = 10; var animationSpeed = settings.animationSpeed; var pauseTime = settings.pauseTime + animationSpeed; var effects = settings.effects; var sliderContainer = $(this); var showThumbnails = settings.thumbnails; var images = new Array; var currentImage = null; var previousImage = null; var currentImageIndex = 0; var previousImageIndex = 0; var coordinates = new Array; var timeFactor = 0; var animationInterval; var centerLeft = 0; var centerTop = 0; var zindex = 100; var circles = 10; var direction = "backward"; var isForward = true; var minCircumeference; var currentRow = 0; var isAnimating = false; var captionContainer; var navContainer; var totalImages; var captions; var visibleTumbnails = 0; var sliderWidth = sliderContainer.width(); var sliderHeight = sliderContainer.height(); var theme = ""; var wBars = cols * 2; var hBars = rows * 2; var noOfBoxes = rows * cols; var factor = 0; var complete = 0; var sliderWrapper = $("<div/>").addClass("quake-slider-wrapper"); sliderWrapper.css({ width: sliderWidth, height: sliderHeight }); if (!sliderContainer.hasClass("quake-slider")) sliderContainer.addClass("quake-slider"); sliderContainer.before(sliderWrapper); sliderWrapper.append(sliderContainer); sliderContainer.find(".quake-slider-images").css("display", "none"); captionContainer = sliderContainer.find(".quake-slider-captions").css("display", "none").addClass("quake-slider-caption-container"); if (sliderWidth % 2 != 0) circles--; centerLeft = sliderWidth / 2; centerTop = sliderHeight / 2; $(window).load(function () { $('link[href*="quake.skin.css"]').each(function () { var a = $(this).attr("href").split("/"); theme = a[a.length - 2] }); navContainer = $("<div/>").addClass("quake-nav"); navContainer.append($("<a/>").addClass("quake-prev").html(settings.prevText)).append($("<a/>").addClass("quake-next").html(settings.nextText)); totalImages = sliderContainer.find(".quake-slider-images img").length; captions = sliderContainer.find(".quake-slider-caption").clone(true).css({ opacity: 1 }); $(".quake-slider-images img", sliderContainer).each(function () { if ($(this).parent().is("a")) { var a = $(this).parent().clone(); images.push(a) } else images.push($(this).clone()) }); setup(); addNavigationControls(); runAnimation(); start() }); var currentEffect = "randomFade"; var initialized = false; var currentEffectIndex = 0 }) } }); var rotateUnits = "deg"; $.fn.rotate = function (a) { var b = $(this).css("transform") || "none"; if (typeof a == "undefined") { if (b) { var c = b.match(/rotate\(([^)]+)\)/); if (c && c[1]) { return c[1] } } return 0 } var c = a.toString().match(/^(-?\d+(\.\d+)?)(.+)?$/); if (c) { if (c[3]) rotateUnits = c[3]; $(this).css("transform", b.replace(/none|rotate\([^)]*\)/, "") + "rotate(" + c[1] + rotateUnits + ")") } return this }; $.fn.scale = function (a, b, c) { var d = $(this).css("transform"); if (typeof a == "undefined") { if (d) { var e = d.match(/scale\(([^)]+)\)/); if (e && e[1]) { return e[1] } } return 1 } $(this).css("transform", d.replace(/none|scale\([^)]*\)/, "") + "scale(" + a + ")"); return this }; var curProxied = $.fx.prototype.cur; $.fx.prototype.cur = function () { if (this.prop == "rotate") { return parseFloat($(this.elem).rotate()) } else if (this.prop == "scale") { return parseFloat($(this.elem).scale()) } return curProxied.apply(this, arguments) }; $.fx.step.rotate = function (a) { $(a.elem).rotate(a.now + rotateUnits) }; $.fx.step.scale = function (a) { $(a.elem).scale(a.now) }; var animateProxied = $.fn.animate; $.fn.animate = function (a) { if (typeof a["rotate"] != "undefined") { var b = a["rotate"].toString().match(/^(([+-]=)?(-?\d+(\.\d+)?))(.+)?$/); if (b && b[5]) { rotateUnits = b[5] } a["rotate"] = b[1] } return animateProxied.apply(this, arguments) }; var _propsObj = null; var proxied = $.fn.css; $.fn.css = function (a, b) { if (_propsObj === null) { if (typeof $.cssProps != "undefined") { _propsObj = $.cssProps } else if (typeof $.props != "undefined") { _propsObj = $.props } else { _propsObj = {} } } if (typeof _propsObj["transform"] == "undefined" && (a == "transform" || typeof a == "object" && typeof a["transform"] != "undefined")) { _propsObj["transform"] = getTransformProperty(this.get(0)) } if (_propsObj["transform"] != "transform") { if (a == "transform") { a = _propsObj["transform"]; if (typeof b == "undefined" && jQuery.style) { return jQuery.style(this.get(0), a) } } else if (typeof a == "object" && typeof a["transform"] != "undefined") { a[_propsObj["transform"]] = a["transform"]; delete a["transform"] } } return proxied.apply(this, arguments) } })(jQuery)